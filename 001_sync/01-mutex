package main

import (
	"fmt"
	"sync"
	"time"
)

var (
	// mutex   sync.Mutex
	balance int
)

func main() {
	fmt.Println("Bank Service Started")

	balance = 1000

	var wg sync.WaitGroup

	wg.Add(2)
	go withdraw(700, &wg)
	go deposit(300, &wg)

	wg.Wait()
	fmt.Println("Bank closed with new balance:", balance)
}

func getBalance() int {
	return balance
}

func updateBalance(value int) {
	balance = value
}

func deposit(value int, wg *sync.WaitGroup) {
	defer wg.Done()
	// mutex.Lock()
	fmt.Printf("Depositing %d to account with balance %d\n", value, balance)
	b := getBalance()
	// to make sure withdraw read the balance before we update it
	time.Sleep(time.Second)
	updateBalance(b + value)
	// mutex.Unlock()
}

func withdraw(value int, wg *sync.WaitGroup) {
	defer wg.Done()
	// mutex.Lock()
	fmt.Printf("Withdrawing %d from account with balance %d\n", value, balance)
	b := getBalance()
	// to make sure deposit read the balance before we update it
	time.Sleep(time.Second)
	updateBalance(b - value)
	// mutex.Unlock()
}
